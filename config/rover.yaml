# generate graph from given relations; edges are generated depending on the
# outputs/functions defined here
relations:
  tdl:
    dmin:
      in: [laser_points]
      fct: "min(laser_points)"
  tdc:
    dmin:
      in: [dcam_points]
      fct: "min(dcam_points)"
  tds:
    dmin:
      in: [sonar_ranges]
      fct: "min(sonar_ranges)"
  tdb:
    dmin:
      in: [bumper_states]
      fct: "boolean_and(bumper_states) * FLOAT_MAX"
  tdm:
    dmin:
      in: [position, map]
      fct: "map(position)"
    position:
      in: [dmin, map]
      fct: "map(dmin)"
  tda:
    dmin:
      in: [motor_current, current_threshold]
      fct: "(motor_current < threshold) * FLOAT_MAX"
  tlb:
    bumper_states:
      in: [laser_points, bumper_threshold]
      fct: "min(laser_points[a:b]) < threshold"
  tcl:
    laser_points:
      in: [dcam_points, laser_y]
      fct: "dcam_points(laser_y)"
  tcs:
    sonar_ranges:
      in: [dcam_points]
      fct: "dcam_points(sonar_x[a:b], sonar_y[c:d])"
  tba:
    motor_current:
      in: [bumper_states]
      fct: "!boolean_and(bumper_states) * CURRENT_MAX"

# node type: 0..variable, 1..relation
# (must match enum in shsamodel.py)
properties:

  # type will be added (w.r.t. 'relations' given above)

  description:
    dmin: "minimum distance to obstacle"
    laser_points: "laser point cloud"
    dcam_points: "depth-camera point cloud"
    sonar_ranges: "sonar ranges"
    bumper_states: "bumper states"
    map: "map of the environment"
    position: "position of the rover in the environment"
    motor_current: "current / power consumption of motors"
    tdl: "dmin = min(laser_points)"
    tdc: "dmin = min(dcam_points)"
    tds: "dmin = min(sonar_points)"
    tdb: "dmin = boolean_and(bumper_states) * FLOAT_MAX"
    tdm: "dmin = map(position) ; position = map(dmin)"
    tda: "dmin = (motor_current < threshold) * FLOAT_MAX"
    tlb: "bumper_states[c] = min(laser_points[a:b]) < threshold"
    tcl: "laser_points = dcam_points(laser_y)"
    tcs: "sonar_ranges = dcam_points(sonar_x[a:b], sonar_y[c:d])"
    tba: "current = !boolean_and(bumper_states) * CURRENT_MAX"

  provided:
    dmin: False
    laser_points: True
    dcam_points: True
    sonar_ranges: True
    bumper_states: True
    map: True
    position: True
    motor_current: True
    current_threshold: True
    bumper_threshold: True
    laser_y: True

  need:
    dmin: 1
